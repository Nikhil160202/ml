Q.1. Create a multiple linear regression model for house price dataset divide dataset into train and test data while giving it to model and predict prices of house.
Ans:
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.DataFrame(pd.read_csv('C:/Users/PC 04/Downloads/Housing.csv'))
print(df.head(5))
df.replace([np.inf, -np.inf], np.nan, inplace=True)
df.dropna(subset=['price'], inplace=True)
#creating dependant and independant variables
df = df[['price', 'area', 'bedrooms', 'bathrooms']]
X = df[['area', 'bedrooms', 'bathrooms']]
y = df['price']
X.shape
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_pred
#evaluating the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-Squared: {r2}")
#visualizing the result
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices (Linear Regression)')
plt.show()

Q.2. Write a python program to implement Linear SVM using UniversalBank.csv.
Ans:
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler
# Step 1: Load the dataset
# Replace 'UniversalBank.csv' with the actual path of your CSV file
df = pd.read_csv('UniversalBank.csv')
# Step 2: Preview the dataset
print("\nDataset Preview:")
print(df.head())
# Step 3: Preprocess the data
# Handle missing values (if any)
print("\nChecking for missing values...")
print(df.isnull().sum())
# If any missing values exist, handle them accordingly (drop or fill)
df = df.dropna()  # Dropping rows with missing values (alternatively, use fillna())
# Step 4: Encode categorical variables (if any)
# For example, if the 'Personal Loan' column is categorical, encode it
# Assuming 'Personal Loan' is the target variable and needs to be encoded (if it's categorical)
df['Personal Loan'] = df['Personal Loan'].astype('category')
# Step 5: Select the features (X) and target variable (y)
# Assuming 'Personal Loan' is the target variable, and all others are features
X = df.drop('Personal Loan', axis=1)  # Features (independent variables)
y = df['Personal Loan']  # Target variable (dependent variable)
# Step 6: Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 7: Scale the features (important for SVM)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Step 8: Initialize the Linear SVM model
svm_model = SVC(kernel='linear', random_state=42)
# Step 9: Train the model
svm_model.fit(X_train_scaled, y_train)
# Step 10: Make predictions on the test set
y_pred = svm_model.predict(X_test_scaled)
# Step 11: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
# Step 12: Print the results
print(f"\nAccuracy: {accuracy}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)
# Displaying actual vs predicted values
print("\nActual vs Predicted values:")
for i in range(len(y_test)):
    print(f"Actual: {y_test.iloc[i]}, Predicted: {y_pred[i]}")
