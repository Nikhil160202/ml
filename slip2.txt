Q.1. Write a python program to implement simple Linear Regression for predicting house
price. First find all null values in a given dataset and remove them.
Ans:
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Load dataset (replace 'path_to_dataset.csv' with the actual path to your CSV file)
dataset = pd.read_csv('path_to_dataset.csv')
# Display initial data information
print("Initial Dataset Information:")
print(dataset.info())
# Step 1: Check for null values and remove rows with null values
print("\nChecking for null values...")
print(dataset.isnull().sum())
# Remove rows with any null values
dataset = dataset.dropna()
print("\nDataset after removing null values:")
print(dataset.info())
# Step 2: Prepare features and target variables
# Assuming 'square_footage' is the feature and 'price' is the target variable
X = dataset[['square_footage']]  # Feature(s)
y = dataset['price']  # Target variable
# Step 3: Split dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Initialize and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)
# Step 5: Predict on the test set
y_pred = model.predict(X_test)
# Step 6: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("\nModel Evaluation:")
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")
# Displaying prediction results
print("\nPredictions on test set:")
for i in range(len(X_test)):
    print(f"Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.iloc[i]:.2f}")

Q.2. The data set refers to clients of a wholesale distributor. It includes the annual
spending in monetary units on diverse product categories. Using data Wholesale
customer dataset compute agglomerative clustering to find out annual spending
clients in the same region.
Ans:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import AgglomerativeClustering
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
# Load the dataset
df = pd.read_csv("C:/Users/PC 04/Downloads/Wholesale customers data.csv")
# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())
# Check for missing values
print("\nMissing values in each column:")
print(df.isnull().sum())
# Features for clustering (dropping 'Channel' and 'Region' for numerical
analysis)
features = df.drop(columns=['Channel', 'Region'])
# Standardize the features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)
# Perform Agglomerative Clustering
# Try different values for n_clusters
silhouette_scores = []
k_values = range(2, 11)
for k in k_values:
model = AgglomerativeClustering(n_clusters=k)
labels = model.fit_predict(features_scaled)
silhouette_scores.append(silhouette_score(features_scaled, labels))
# Plot Silhouette Scores
plt.figure(figsize=(10, 6))
plt.plot(k_values, silhouette_scores, marker='o')
plt.title('Silhouette Score for Agglomerative Clustering')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.xticks(k_values)
plt.grid()
plt.show()
22# Choose optimal number of clusters based on silhouette scores
optimal_k = 4 # You can adjust this based on the results
# Fit Agglomerative Clustering with the optimal number of clusters
model = AgglomerativeClustering(n_clusters=optimal_k)
df['Cluster'] = model.fit_predict(features_scaled)
# Display the clustered data
print("\nClustered Customer Data:")
print(df.head())
# Visualizing the clusters
plt.figure(figsize=(12, 8))
sns.scatterplot(data=df, x='Fresh', y='Grocery', hue='Cluster',
palette='Set2', s=100)
plt.title('Agglomerative Clustering of Wholesale Customers')
plt.xlabel('Annual Spending on Fresh Products')
plt.ylabel('Annual Spending on Grocery Products')
plt.legend(title='Cluster')
plt.show()
# Display cluster sizes
print("\nCluster Sizes:")
print(df['Cluster'].value_counts())

