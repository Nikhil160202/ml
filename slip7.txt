Q.1. Fit the simple linear regression model to Salary_positions.csv data. Predict the sa  of level 11 and level 12 employees.
Ans:
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import os
df=pd.read_csv("C:/Users/PC 04/Downloads/Position_Salaries.csv")
df.head()
# Following plot the relationship between Level and Salary
plt.figure(figsize=(15, 10))
plt.scatter(x=df["Level"], y=df["Salary"])
plt.xlabel("Level");
plt.ylabel("Salary")
X = df.iloc[:, 1:2].values
y = df.iloc[:, -1:].values
X
from sklearn.linear_model import LinearRegression
# linear regression model
lr_normal = LinearRegression()
lr_normal.fit(X, y)
# import Polynomial Features
from sklearn.preprocessing import PolynomialFeatures
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 2)
X_poly = poly_reg.fit_transform(X)
X_poly
lr_poly.fit(X_poly, y)
# Visualising the Linear Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_normal.predict(X), color = 'blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression-Degree 2)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# polynomial regression model
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 3) # change form 2 to 3
X_poly = poly_reg.fit_transform(X)
lr_poly.fit(X_poly, y)
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression- Degree 3)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# polynomial regression model
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 4) # change form
X_poly = poly_reg.fit_transform(X)
lr_poly.fit(X_poly, y)
3 to 4
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression-Degree 4)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# Now lets predict some values
lr_normal.predict([[8.5]]) # As per our linear regresion model salary.of
8.5 level should be 492136.
lr_poly.predict(poly_reg.fit_transform([[8.5]]))

Q.2. Write a python program to implement Naive Bayes on weather forecast dataset.
Ans:
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Load the dataset
# Replace 'weather.csv' with the actual path to your dataset
df = pd.read_csv('weather.csv')
# Step 2: Preview the dataset
print("\nDataset Preview:")
print(df.head())
# Step 3: Handle missing values (if any)
print("\nChecking for missing values...")
print(df.isnull().sum())
# Step 4: Encode categorical features and target variable
label_encoder = LabelEncoder()
# Encoding categorical features (e.g., Outlook, Windy)
df['Outlook'] = label_encoder.fit_transform(df['Outlook'])
df['Windy'] = label_encoder.fit_transform(df['Windy'])
# Encoding target variable (PlayTennis)
df['PlayTennis'] = label_encoder.fit_transform(df['PlayTennis'])
# Step 5: Split the dataset into features (X) and target (y)
X = df.drop('PlayTennis', axis=1)  # Features (excluding the target)
y = df['PlayTennis']  # Target variable (PlayTennis)
# Step 6: Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 7: Initialize the Naive Bayes model (Gaussian Naive Bayes for continuous data)
nb_model = GaussianNB()
# Step 8: Train the model
nb_model.fit(X_train, y_train)
# Step 9: Make predictions on the test set
y_pred = nb_model.predict(X_test)
# Step 10: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
# Step 11: Print the results
print(f"\nAccuracy: {accuracy}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)
# Displaying actual vs predicted values
print("\nActual vs Predicted values:")
for i in range(len(y_test)):
    print(f"Actual: {y_test.iloc[i]}, Predicted: {y_pred[i]}")
