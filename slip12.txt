Q1. Write a python program to implement k-nearest Neighbors ML algorithm to build prediction model (Use iris Dataset).
Ans:
# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
# Step 1: Load the dataset from CSV file
# Replace 'path_to_your_iris.csv' with the actual path to your CSV file
file_path = 'path_to_your_iris.csv'  # Provide the path to your CSV file
df = pd.read_csv(file_path)
# Step 2: Preview the dataset (optional)
print("\nDataset Preview:")
print(df.head())
# Step 3: Split the dataset into features (X) and target (y)
# Assuming the last column is the target variable (species) and the rest are features
X = df.drop('species', axis=1)  # Features (replace 'species' with the actual target column name)
y = df['species']  # Target variable (species)
# Step 4: Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 5: Standardize the features using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
# Step 6: Initialize the K-Nearest Neighbors classifier
# We will use k=3, but you can experiment with different values for k
knn = KNeighborsClassifier(n_neighbors=3)
# Step 7: Train the KNN model
knn.fit(X_train, y_train)
# Step 8: Make predictions on the test set
y_pred = knn.predict(X_test)
# Step 9: Evaluate the model's performance using accuracy
accuracy = accuracy_score(y_test, y_pred)
# Step 10: Print the accuracy
print(f"Accuracy of the K-Nearest Neighbors model: {accuracy * 100:.2f}%")

Q2. Fit the simple linear regression and polynomial linear regression models to
Salary_positions.csv data. Find which one is more accurately fitting to the given
data. Also predict the salaries of level 11 and level 12 employees.
Ans: 
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import os
df=pd.read_csv("C:/Users/PC 04/Downloads/Position_Salaries.csv")
df.head()
# Following plot the relationship between Level and Salary
plt.figure(figsize=(15, 10))
plt.scatter(x=df["Level"], y=df["Salary"])
plt.xlabel("Level");
plt.ylabel("Salary")
X = df.iloc[:, 1:2].values
y = df.iloc[:, -1:].values
X
from sklearn.linear_model import LinearRegression
# linear regression model
lr_normal = LinearRegression()
lr_normal.fit(X, y)
# import Polynomial Features
from sklearn.preprocessing import PolynomialFeatures
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 2)
X_poly = poly_reg.fit_transform(X)
X_poly
lr_poly.fit(X_poly, y)
# Visualising the Linear Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_normal.predict(X), color = 'blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression-Degree 2)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# polynomial regression model
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 3) # change form 2 to 3
X_poly = poly_reg.fit_transform(X)
lr_poly.fit(X_poly, y)
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression- Degree 3)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# polynomial regression model
lr_poly = LinearRegression()
poly_reg = PolynomialFeatures(degree = 4) # change form
X_poly = poly_reg.fit_transform(X)
lr_poly.fit(X_poly, y)
# Visualising the Polynomial Regression results
plt.figure(figsize=(15, 10))
plt.scatter(X, y, color = 'red')
plt.plot(X, lr_poly.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Position Level Vs Salary (Polynomial Regression-Degree 4)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()
# Now lets predict some values
lr_normal.predict([[8.5]]) # As per our linear regresion model salary.of
8.5 level should be 492136.
lr_poly.predict(poly_reg.fit_transform([[8.5]]))
